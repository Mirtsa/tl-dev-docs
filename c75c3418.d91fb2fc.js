(window.webpackJsonp=window.webpackJsonp||[]).push([[266],{335:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),o=(n(0),n(413)),s={layout:"relay",title:"Running the Trustlines system"},l={unversionedId:"running_trustlines_system",id:"running_trustlines_system",isDocsHomePage:!1,title:"Running the Trustlines system",description:"This document explains how to run your own trustlines network relay server infrastructure. We will walk you through setting up a relay server and all dependent components. The current documentation is written for a Debian-based Linux system.",source:"@site/relay/running_trustlines_system.md",slug:"/running_trustlines_system",permalink:"/relay/running_trustlines_system",editUrl:"https://github.com/trustlines-protocol/tl-dev-docs/edit/master/relay/running_trustlines_system.md",version:"current",sidebar:"Relay",previous:{title:"Trustlines Relay API",permalink:"/relay/relay-api"},next:{title:"Running Trustlines via docker-compose",permalink:"/relay/trustlines_docker"}},i=[{value:"Dependencies",id:"dependencies",children:[{value:"Trustlines Blockchain",id:"trustlines-blockchain",children:[]},{value:"Contracts",id:"contracts",children:[]},{value:"PostgreSQL",id:"postgresql",children:[]},{value:"Py-eth-index",id:"py-eth-index",children:[]},{value:"Relay server",id:"relay-server",children:[]}]}],c={rightToc:i};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This document explains how to run your own ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://trustlines.network/"}),"trustlines network")," relay server infrastructure. We will walk you through setting up a relay server and all dependent components. The current documentation is written for a Debian-based Linux system.")),Object(o.b)("p",null,"If you are low on time, you may jump to the description of the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"trustlines_docker"}),"docker-compose based setup"),"."),Object(o.b)("h2",{id:"dependencies"},"Dependencies"),Object(o.b)("p",null,"Since the trustlines infrastructure components are implemented in python 3, you need to install relevant dependencies. You will need at least python 3.6."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"sudo apt install build-essential python3-dev python3-venv pkg-config \\\n     libssl-dev automake autoconf libtool git libpq-dev\n")),Object(o.b)("p",null,"The installation instructions assume you create a dedicated user account and put\nfiles directly into the user's home directory. Else, adapt the paths to your needs!"),Object(o.b)("h3",{id:"trustlines-blockchain"},"Trustlines Blockchain"),Object(o.b)("p",null,"You need to run our modified parity node, which provides the JSONRPC API to the relay\nserver and the indexer. The documentation on how to run it can be found on the\n",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../blockchain/tlbc"}),"Blockchain Overview page")),Object(o.b)("h3",{id:"contracts"},"Contracts"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/contracts"}),"trustlines-contracts\nrepository")," contains the\nsolidity contracts to be deployed on the blockchain and a commandline tool to deploy the contracts. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"../contracts/contracts_deployment"}),"how to deploy the\ncontracts guide")," contains more information on how to deploy the contracts.\nThe tool will return the addresses of the deployed contracts. You need to provide that information to the relay server with as json file ",Object(o.b)("inlineCode",{parentName:"p"},"addresses.json")," with the following format:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "networks":\n  [<list of currency network addresses>],\n  "unwEth": <address of unw_eth_contract>,\n  "exchange": <address of exchange>\n}\n')),Object(o.b)("p",null,"For the already deployed contracts on the trustlines blockchain use this file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "networks": [\n    "0x9750bdB86B32DCaeFEAea4f29857D52C8d848860",\n    "0xe4D3cEB3d59B6Fa4a39C8D9525c84C79057C1e29",\n    "0xd75C9C8a79D6a85d4923b7C16BAb144cC9BB48e4"\n  ]\n}\n')),Object(o.b)("p",null,"We assume from now on that the contracts have already been deployed\nand that the ",Object(o.b)("inlineCode",{parentName:"p"},"addresses.json")," file has been copied to the user's home directory."),Object(o.b)("h3",{id:"postgresql"},"PostgreSQL"),Object(o.b)("p",null,"The trustlines system uses a PostgreSQL database to store some user data and to\nkeep a synchronized view on the relevant state from the blockchain."),Object(o.b)("p",null,"Install PostgreSQL with:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"sudo apt install postgresql\n")),Object(o.b)("p",null,"After this, a database user must be created. Please use a real password:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"sudo -u postgres psql <<EOF\nCREATE USER trustlines WITH PASSWORD 'choose-a-password-here';\nALTER USER trustlines CREATEDB;\nEOF\n")),Object(o.b)("p",null,"Next, the postgres environment should be configured for the account running\nthe relay server:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"echo >>~/.pgpass 'localhost:5432:*:trustlines:choose-a-password-here'; chmod 0600 ~/.pgpass\ncat >>~/.bashrc <<EOF\nexport PGUSER=trustlines\nexport PGHOST=localhost\nexport PGDATABASE=trustlinesdb\nEOF\n")),Object(o.b)("p",null,"After logging in again, in order to have the environment variables set, the user\nshould be able to create the database:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sql"}),"createdb trustlinesdb\n")),Object(o.b)("p",null,"The rest of this tutorial assumes that the user running the relay and\npy-eth-index related commands has a working postgresql environment configured.\nAll programs consider the PG","*"," environment variables and will read ~/.pgpass for\ninformation about passwords. The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#py-eth-index"}),"py-eth-index section")," describes\nhow to create the trustlines specific tables."),Object(o.b)("h3",{id:"py-eth-index"},"Py-eth-index"),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/trustlines-protocol/py-eth-index"}),"py-eth-index repository"),"\ncontains a helper program that synchronizes the relevant information from the\nblockchain into a postgresql database."),Object(o.b)("h4",{id:"installation-of-py-eth-index"},"Installation of py-eth-index"),Object(o.b)("p",null,"Clone the git repository:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd ~\ngit clone https://github.com/trustlines-protocol/py-eth-index\n")),Object(o.b)("p",null,"Let\u2019s create a virtualenv for this repository:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"python3 -m venv ~/opt/py-eth-index; ~/opt/py-eth-index/bin/pip install -U pip\n")),Object(o.b)("p",null,"and install py-eth-index"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd ~/py-eth-index\n~/opt/py-eth-index/bin/pip install -c constraints.txt -r requirements.txt\n~/opt/py-eth-index/bin/pip install -c constraints.txt .\n")),Object(o.b)("h4",{id:"initializing-the-database"},"Initializing the database"),Object(o.b)("p",null,"After the database has been created, it must be initialized. This can be done with the following command:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"~/opt/py-eth-index/bin/ethindex createtables\n")),Object(o.b)("h4",{id:"importing-the-abis"},"Importing the ABIs"),Object(o.b)("p",null,"We need to import the ABIs from the trustline-contracts. Trustlines-contracts is\ninstalled as a dependency of the relay server. Please run the following only\nafter you have installed the relay server."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cp ~/opt/relay/trustlines-contracts/build/contracts.json ~\n~/opt/py-eth-index/bin/ethindex importabi\n")),Object(o.b)("h4",{id:"importing-events"},"Importing events"),Object(o.b)("p",null,"The following command will start importing all relevant events into the postgres\ndatabase:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"~/opt/py-eth-index/bin/ethindex runsync\n")),Object(o.b)("p",null,"This program will run forever."),Object(o.b)("h3",{id:"relay-server"},"Relay server"),Object(o.b)("h4",{id:"prerequisites-for-the-installation"},"Prerequisites for the installation"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Python 3.6 or up"),Object(o.b)("li",{parentName:"ul"},"pip")),Object(o.b)("p",null,"Installation on Ubuntu"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"sudo apt install build-essential python3-dev libsecp256k1-dev python3-virtualenv virtualenv pkg-config libssl-dev automake autoconf libtool git\n")),Object(o.b)("h4",{id:"installation-of-the-relay-server"},"Installation of the relay server"),Object(o.b)("p",null,"Clone the git repository, create a virtualenv and install into\nthat."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd ~\ngit clone https://github.com/trustlines-protocol/relay\npython3 -m venv ~/opt/relay; ~/opt/relay/bin/pip install -U pip\ncd ~/relay;\n~/opt/relay/bin/pip install -c constraints.txt -r requirements.txt\n~/opt/relay/bin/pip install -c constraints.txt .\n")),Object(o.b)("h4",{id:"running-the-relay-server"},"Running the relay server"),Object(o.b)("p",null,"The relay server needs the addresses of the deployed contracts. In case you've\ndeployed your own contracts, please copy addresses.json to ",Object(o.b)("inlineCode",{parentName:"p"},"~"),"."),Object(o.b)("p",null,"We will also need a config file. You can use the one from the git checkout:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cp ~/relay/config.toml ~\n")),Object(o.b)("p",null,"The relay server reads both files from the current directory per default,\nso we need to start it where those files have been copied to:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd ~\n~/opt/relay/bin/tl-relay\n")),Object(o.b)("p",null,"However, this behaviour can be changed, you can check the options with:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"cd ~\n~/opt/relay/bin/tl-relay --help\n")),Object(o.b)("p",null,"The relay server needs access to the parity node and the PostgreSQL database.\n",Object(o.b)("inlineCode",{parentName:"p"},"ethindex runsync")," also has to be running for a fully functioning system."))}b.isMDXComponent=!0},413:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||o;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);